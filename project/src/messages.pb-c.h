/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: messages.proto */

#ifndef PROTOBUF_C_messages_2eproto__INCLUDED
#define PROTOBUF_C_messages_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ClientToServer ClientToServer;
typedef struct _ServerToClient ServerToClient;


/* --- enums --- */

typedef enum _ClientToServer__Type {
  CLIENT_TO_SERVER__TYPE__LOGIN = 0,
  CLIENT_TO_SERVER__TYPE__DISC = 1,
  CLIENT_TO_SERVER__TYPE__CHAT = 2,
  CLIENT_TO_SERVER__TYPE__QUERY = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_TO_SERVER__TYPE)
} ClientToServer__Type;
typedef enum _ServerToClient__Code {
  SERVER_TO_CLIENT__CODE__OK = 0,
  SERVER_TO_CLIENT__CODE__NOK = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SERVER_TO_CLIENT__CODE)
} ServerToClient__Code;

/* --- messages --- */

struct  _ClientToServer
{
  ProtobufCMessage base;
  ClientToServer__Type type;
  char *str;
  protobuf_c_boolean has_id_min;
  uint64_t id_min;
  protobuf_c_boolean has_id_max;
  uint64_t id_max;
};
#define CLIENT_TO_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_to_server__descriptor) \
    , 0, NULL, 0,0, 0,0 }


struct  _ServerToClient
{
  ProtobufCMessage base;
  protobuf_c_boolean has_code;
  ServerToClient__Code code;
  size_t n_str;
  char **str;
};
#define SERVER_TO_CLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&server_to_client__descriptor) \
    , 0,0, 0,NULL }


/* ClientToServer methods */
void   client_to_server__init
                     (ClientToServer         *message);
size_t client_to_server__get_packed_size
                     (const ClientToServer   *message);
size_t client_to_server__pack
                     (const ClientToServer   *message,
                      uint8_t             *out);
size_t client_to_server__pack_to_buffer
                     (const ClientToServer   *message,
                      ProtobufCBuffer     *buffer);
ClientToServer *
       client_to_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_to_server__free_unpacked
                     (ClientToServer *message,
                      ProtobufCAllocator *allocator);
/* ServerToClient methods */
void   server_to_client__init
                     (ServerToClient         *message);
size_t server_to_client__get_packed_size
                     (const ServerToClient   *message);
size_t server_to_client__pack
                     (const ServerToClient   *message,
                      uint8_t             *out);
size_t server_to_client__pack_to_buffer
                     (const ServerToClient   *message,
                      ProtobufCBuffer     *buffer);
ServerToClient *
       server_to_client__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   server_to_client__free_unpacked
                     (ServerToClient *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ClientToServer_Closure)
                 (const ClientToServer *message,
                  void *closure_data);
typedef void (*ServerToClient_Closure)
                 (const ServerToClient *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor client_to_server__descriptor;
extern const ProtobufCEnumDescriptor    client_to_server__type__descriptor;
extern const ProtobufCMessageDescriptor server_to_client__descriptor;
extern const ProtobufCEnumDescriptor    server_to_client__code__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_messages_2eproto__INCLUDED */
